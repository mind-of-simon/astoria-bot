import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
ASK_NAME, ASK_DATETIME, ASK_PHONE = range(3)

# –î–æ—Å—Ç—É–ø –∫ Google Sheets
SERVICE_ACCOUNT_FILE = 'sonic-stratum-457808-m2-85af1af437f9.json'
SPREADSHEET_NAME = 'Astoria_Bot_–ó–∞—è–≤–∫–∏'

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, scope)
gc = gspread.authorize(credentials)
sheet = gc.open(SPREADSHEET_NAME).sheet1

from telegram import InputFile

async def send_restaurant_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("menurest.pdf", "rb") as file:
        await update.callback_query.message.reply_document(InputFile(file), filename="–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.pdf")

async def send_spa_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("SPAMENU.pdf", "rb") as file:
        await update.callback_query.message.reply_document(InputFile(file), filename="–ú–µ–Ω—é –°–ü–ê —É—Å–ª—É–≥.pdf")

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="menu_rest")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –°–ü–ê —É—Å–ª—É–≥–∏", callback_data="menu_spa")],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", callback_data="book_table")],
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –°–ü–ê –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="book_spa")],
    ]
    await update.message.reply_text(
        "–ê—Å—Ç–æ—Ä–∏—è –ì—Ä–∞–Ω–¥–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å üõ≥Ô∏è\n"
        "–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å *—Å–∫–∏–¥–∫—É 20%* –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ *Selection* –∏ –Ω–∞ *–°–ü–ê –ø—Ä–æ—Ü–µ–¥—É—Ä—ã*, –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ –¥–Ω—è –Ω–∞—á–∞–ª–∞ –í–∞—à–µ–≥–æ –∫—Ä—É–∏–∑–∞",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    context.application.chat_data[update.effective_chat.id].clear()

    if query.data == "menu_rest":
        await send_restaurant_menu(update, context)
        return ConversationHandler.END
    elif query.data == "menu_spa":
        await send_spa_menu(update, context)
        return ConversationHandler.END
    elif query.data == "book_table":
        context.user_data['service'] = "–†–µ—Å—Ç–æ—Ä–∞–Ω"
    elif query.data == "book_spa":
        context.user_data['service'] = "–°–ü–ê"

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –≥–æ—Å—Ç—è:")
    return ASK_NAME

# –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã
async def ask_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è:")
    return ASK_DATETIME

# –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['datetime'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE

# –§–∏–Ω–∞–ª ‚Äî –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
async def final_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text

    row = [
        context.user_data['service'],
        context.user_data['name'],
        context.user_data['datetime'],
        context.user_data['phone'],
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ]
    sheet.append_row(row)

    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ {context.user_data['service']}.\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω –≤ –¥–µ–Ω—å –ø–æ—Å–∞–¥–∫–∏"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("7621300616:AAEMK_LyhhNk7ZTI0D3IPPB_hEGrsAHqzsY").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_datetime)],
            ASK_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_step)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
